[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.poetry]
authors = ["Aleksandr Sosedskyi <susidskyi@gmail.com>"]
description = "The API for Quoteflix platform"
name = "app"
readme = "README.md"
version = "0.1.0"

[tool.poetry.dependencies]
alembic = "1.13.1"
asyncpg = "0.29.0"
fastapi = "0.110.1"
fastapi-users = {extras = ["sqlalchemy"], version = "13.0.0"}
humanize = "4.9.0"
pydantic-settings = "2.2.1"
python = "^3.12"
python-multipart = "0.0.9"
ruff = "0.3.7"
sqlalchemy = "2.0.29"
uvicorn = "0.29.0"
invoke = "2.2.0"
pytest-asyncio = "0.23.6"
httpx = "0.27.0"
pytest-cov = "5.0.0"
aioboto3 = "12.3.0"
types-aioboto3 = "12.3.0"
srt = "3.5.3"
pytest-mock = "3.14.0"
moto = {version = "5.0.5", extras = ["s3", "server"]}
types-aiobotocore-s3 = "2.12.3"
aiofiles = "23.2.1"
types-aiofiles = "23.2.0.20240403"

[tool.poetry.group.dev.dependencies]
mypy = "1.9.0"
pre-commit = "3.7.0"
pytest = "8.1.1"

# Pytest
[tool.pytest.ini_options]
console_output_style = "progress"


# Mypy
[tool.mypy]
strict = true
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin",
]

[[tool.mypy.overrides]]
module = "asyncpg.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "srt.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "app.tests.*",
    "app.alembic.*",
]
ignore_errors = true


# Ruff
[tool.ruff]
line-length = 119
unsafe-fixes = true

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "N", # pep8-naming
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "S", # flake8-bandit
    "B", # flake8-bugbear
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "PT", # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PL", # Pylint error
    "RUF", # Ruff error
    "UP", # PyUpgrade
]
ignore = [
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for cls in classmethod
    "PLR0913", # Too many arguments

]

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.ruff.lint.extend-per-file-ignores]
"app/tests/*" = [
    "S101", # Use of `assert` detected
    "ANN201", # Missing return type annotation for public function
    "ARG002", # Unused function argument
    "ARG001", # Unused function argument
    "PLR2004", # Magic value used in comparison, consider replacing ` ` with a constant variable
    "S105", # Possible hardcoded password assigned to: "{}"	
    "S106", # Possible hardcoded password assigned to argument: "{}"	
]
"tasks.py"= ["ALL"]
