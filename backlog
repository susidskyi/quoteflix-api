Movie analytics: its all phrases length, phrases number, unique phrases
Fix phrases after review and query only phrases with problem
Match phrases algorithm
Check if really need presign_urls everywhere
Investigate Cross-Origins and middlewares
Move to background_tasks heavy or not important code 
Add tests for Issues
Check naming routes
Check DB queries and retrieve only needed fields to optimize it
Filter issues by active/inactive
Add analytics to count phrases searches etc.
Use import typing everywhere
Replace all get-by with filter
Start using * \ in args
Investigate using 'phrase', 'movie' in places where it's not needed (router, service, repository)
Investigate if we need to cast Model To Scheme in routers.
Squash migrations
Check time types responses
Create pytest tests package
Rename Random_ID to ID
Make Issue look like in DUO maybe
Investigate ordering routes
Check if we search only punctuations
Set limit to search phrase
Add index field
Think how to manage cache locally, avoid flushall and incognito
Work on optimizing queries
Check if we can speed up creating scenes
Add delay before phrase and after phrase when creating then (send values in request)
Check phrases correctness: \n not more than 2-3 for example, not less than 1 second etc.
Update PhraseSchema to return everything about phrase when get_all
Investigate the problem why sometimes phrases are not created
