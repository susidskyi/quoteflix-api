name: Deploy to Dev

on:
  push:
    branches:
      - test-deploy
  workflow_dispatch:

permissions:
  id-token: write
  contents: read


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::305439215774:role/quoteflix-deploy
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      # - name: Build, tag, and push image to Amazon ECR
      #   id: build-image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     IMAGE_TAG: ${{ github.sha }}
      #     ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export EC2_PROJECT_PATH="/home/ubuntu/quoteflix-api"
            export DEBUG_LOGS=true
            export ENVIRONMENT=dev
            export SECRET="1Dv6+GCuYU:zW,W2{SlS<u*0[~grCo"
            export MOVIES_S3_PATH="movies/"
            export INSTALL_DEV=false
            export DOMAIN="phraseqwe.space"
            export IMAGE_NAME="305439215774.dkr.ecr.eu-central-1.amazonaws.com/quoteflix-api:9fda0afeb75faa95a0f7d2e5b390927be597e62a"
            export MAX_FFMPEG_WORKERS=20
            export SCENES_TMP_PATH="/tmp/scenes"
            export PHRASES_PAGE_SIZE=3

            # S3
            export S3_ENDPOINT_URL="http://minio:9000"
            export S3_BUCKET="flickphrase"
            export S3_ACCESS_KEY="${{ secrets.S3_ACCESS_KEY }}"
            export S3_SECRET_KEY="${{ secrets.S3_SECRET_KEY }}"
            export S3_REGION_NAME="weur"

            # Database
            export DATABASE_URL="postgresql+asyncpg://flickphrase:flickphrase@host.docker.internal:5432/flickphrase"
            export POSTGRES_PASSWORD="flickphrase"
            export POSTGRES_USER="flickphrase"
            export POSTGRES_DB="flickphrase"

            # Database test
            export TEST_DATABASE_URL="postgresql+asyncpg://flickphrase-test:flickphrase@test-db:5432/flickphrase-test"
            export TEST_POSTGRES_PASSWORD="flickphrase"
            export TEST_POSTGRES_USER="flickphrase-test"
            export TEST_POSTGRES_DB="flickphrase-test"

            # Traefik
            export USERNAME="admin"
            export PASSWORD="CfP!N+xqzEH\\6\\S30V[9"
            export EMAIL="susidskyi@gmail.com"
            export STACK_NAME="local-flickphrase-com"
            export ROBOTS_HEADER="noindex, nofollow"
            export HASHED_PASSWORD="qweqwe"
            # Logfire
            export LOGFIRE_TOKEN="${{ secrets.LOGFIRE_TOKEN }}"

            # Redis
            export REDIS_PASSWORD="ghpS9irRXK27ML5"
            export REDIS_API_CACHE_URL="redis://:ghpS9irRXK27ML5@redis:6379"

            # Admin
            export ADMIN_PANEL_PATH="/api/admin-dl94t1rt572w6ijqsbsu/"

            cd ${EC2_PROJECT_PATH}
            git fetch origin test-deploy
            git reset --hard origin/test-deploy
            aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 305439215774.dkr.ecr.eu-central-1.amazonaws.com
            docker pull "305439215774.dkr.ecr.eu-central-1.amazonaws.com/quoteflix-api:9fda0afeb75faa95a0f7d2e5b390927be597e62a"
            docker stop quoteflix-api quoteflix-traefik quoteflix-redis || true
            docker rm quoteflix-api quoteflix-traefik quoteflix-redis || true
            docker network create traefik-public || true
            docker compose -f docker-compose.yaml -f docker-compose.prod.yaml up -d